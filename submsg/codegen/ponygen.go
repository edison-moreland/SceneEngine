package main

import (
	"bytes"
	"embed"
	"os"
	"strings"
	"text/template"
	"unicode"
	"unicode/utf8"
)

//go:embed pony_templates
var ponyTemplates embed.FS

type ponyGen struct {
	generatedCode *bytes.Buffer

	t *template.Template
}

type ponyTemplateContext struct {
	Prefix   string
	Messages []MsgDesc
}

func newPonyGen() codegen {
	var b bytes.Buffer
	b.WriteString("// Code generated by submsg; DO NOT EDIT. \n")
	b.WriteString("use \"../submsg/runtime/pony\" \n")

	t := template.Must(template.
		New("ponygen").
		Funcs(map[string]any{
			"capitalize": func(s string) string {
				var sb strings.Builder
				firstLetter, size := utf8.DecodeRuneInString(s)
				sb.WriteRune(unicode.ToUpper(firstLetter))
				sb.WriteString(s[size:])

				return sb.String()
			},
			"snakeToCamel": func(s string) string {
				var sb strings.Builder
				for i, part := range strings.Split(s, "_") {
					part = strings.ToLower(part)

					if i == 0 {
						sb.WriteString(part)
						continue
					}

					firstLetter, size := utf8.DecodeRuneInString(part)
					sb.WriteRune(unicode.ToUpper(firstLetter))
					sb.WriteString(part[size:])
				}

				return sb.String()
			},
		}).
		ParseFS(ponyTemplates, "pony_templates/*.tmpl"))

	return &ponyGen{
		generatedCode: &b,
		t:             t,
	}
}

func (p *ponyGen) tmpl(name string, prefix string, messages []MsgDesc) {
	err := p.t.ExecuteTemplate(p.generatedCode, name, ponyTemplateContext{
		Prefix:   prefix,
		Messages: messages,
	})

	if err != nil {
		panic(err)
	}

}

func (p *ponyGen) MsgIds(prefix string, messages []MsgDesc) {
	p.tmpl("msg_ids.tmpl", prefix, messages)
}

func (p *ponyGen) Server(prefix string, messages []MsgDesc) {
	p.tmpl("server.tmpl", prefix, messages)
}

func (p *ponyGen) Client(prefix string, messages []MsgDesc) {
	p.tmpl("client.tmpl", prefix, messages)
}

func (p *ponyGen) Done() error {
	return os.WriteFile(ponyOutputFile, p.generatedCode.Bytes(), 0666)
}
