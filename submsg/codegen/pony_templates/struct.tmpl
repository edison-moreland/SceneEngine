
class val {{ .Name | ponyType }} is MsgPackMarshalable
{{- range $name, $type := .Fields }}
{{- if $type | isArray }}
    var {{ $name }}: {{ $type | ponyType }} val
{{- else }}
    var {{ $name }}: {{ $type | ponyType }}
{{- end}}
{{- end }}

    new val create(
{{- $i := 1 }}
{{- range $name, $type := .Fields }}
{{- if $type | isArray }}
        {{ $name }}': {{ $type | ponyType }} val
{{- else }}
        {{ $name }}': {{ $type | ponyType }}
{{- end }} {{- if ne $i $.FieldCount -}} , {{- end }}
{{- $i = add $i 1 }}
{{- end }}
        ) =>
{{- range $name, $type := .Fields }}
        {{ $name }} = {{ $name }}'
{{- end }}

    new val zero() =>
{{- range $name, $type := .Fields }}
        {{ $name }} = {{ $type | zeroVal }}
{{- end}}

    fun marshal_msgpack(w: Writer ref)? =>
        MessagePackEncoder.fixmap(w, {{ .FieldCount }})?
{{- range $name, $type := .Fields }}
        MessagePackEncoder.fixstr(w, "{{ $name | snakeToCamel | capitalize }}")?
{{- if eq $type "String" }}
        MessagePackEncoder.{{ $type | msgpack }}(w, {{ $name }})?
{{- else if $type | isPrimitive }}
        MessagePackEncoder.{{ $type | msgpack }}(w, {{ $name }})
{{- else if $type | isArray }}
        Marshal.array_header(w, {{ $name }}.size())?
        for item' in {{ $name }}.values() do
            item'.marshal_msgpack(w)?
        end
{{- else }}
        {{ $name }}.marshal_msgpack(w)?
{{- end}}
{{- end }}

primitive UnmarshalMsgPack{{ .Name | snakeToCamel | capitalize }}
    fun apply(r: Reader ref): {{ .Name | snakeToCamel | capitalize }} =>
{{- range $name, $type := .Fields }}
{{- if $type | isArray }}
        var {{ $name }}': {{ $type | ponyType }} val = {{ $type | zeroVal }}
{{- else }}
        var {{ $name }}': {{ $type | ponyType }} = {{ $type | zeroVal }}
{{- end }}
{{- end }}

        try
            let map_size = Unmarshal.map(r)?
            for i in Range(0, map_size) do
                let field_name = MessagePackDecoder.fixstr(r)?
                match field_name
{{- range $name, $type := .Fields }}
                | "{{ $name | ponyType }}" =>
{{- if $type | isPrimitive }}
                    {{ $name }}' = MessagePackDecoder.{{ $type | msgpack_decode }}(r)?
{{- else if $type | isArray }}
                    {{ $name }}' = Unmarshal.array[{{ $type | arrayType }}](r, UnmarshalMsgPack{{ $type | arrayType }}~apply())?
{{- else }}
                    {{ $name }}' = UnmarshalMsgPack{{ $type | ponyType }}(r)
{{- end}}
{{- end }}
                else
                    var error_message = String()
                    error_message.append("unknown field: ")
                    error_message.append(consume field_name)

                    Debug(error_message where stream = DebugErr)
                end
            end
        else
            Debug("Error unmarshalling" where stream = DebugErr)
        end

        {{ .Name | ponyType }}(
{{- $i := 1 }}
{{- range $name, $type := .Fields }}
{{- if $type | isArray }}
        consume {{ $name }}'
{{- else }}
        {{ $name }}'
{{- end }} {{- if ne $i $.FieldCount -}} , {{- end }}
{{- $i = add $i 1 }}
{{- end }}
        )