package main

import (
	"strings"
	"unicode"
	"unicode/utf8"

	"github.com/dave/jennifer/jen"
)

const runtimeImport = "github.com/edison-moreland/SceneEngine/submsg/runtime/go"

type goGen struct {
	*jen.File
}

func newGoGen() codegen {
	j := jen.NewFile(goPackage)
	j.ImportName(runtimeImport, "submsg")
	j.PackageComment("Code generated by submsg; DO NOT EDIT.")

	return &goGen{j}
}

func (g *goGen) MsgIds(prefix string, messages []MsgDesc) {
	g.Const().DefsFunc(func(g *jen.Group) {
		for i, msg := range messages {
			g.Id(goMsgId(prefix, msg)).Qual(runtimeImport, "MsgId").Op("=").Lit(i)
		}
	})
}

func (g *goGen) Server(prefix string, messages []MsgDesc) {
	// Server interface
	serverInterfaceId := goId(true, prefix, "server")
	g.Type().Id(serverInterfaceId).InterfaceFunc(func(g *jen.Group) {
		for _, msg := range messages {
			g.Id(snakeToGoId(true, msg.Name)).
				Call(jen.Id("r").Qual("io", "Reader")).
				Id("error")
		}
	})

	// Server router
	innerFunc := jen.Func().
		Params(
			jen.Id("id").Qual(runtimeImport, "MsgId"),
			jen.Id("body").Qual("io", "Reader")).
		Error().
		Block(jen.Switch(jen.Id("id")).BlockFunc(func(g *jen.Group) {
			for _, msg := range messages {
				g.Case(
					jen.Id(goMsgId(prefix, msg)),
				).Block(
					jen.Return(
						jen.Id("s").
							Dot(snakeToGoId(true, msg.Name)).
							Call(jen.Id("body")),
					),
				)
			}

			g.Default().Block(
				jen.Return(jen.Qual(runtimeImport, "ErrMsgIdUnknown")),
			)

		}))

	g.Func().
		Id(goId(true, prefix, "router")).
		Params(jen.Id("s").Id(serverInterfaceId)).
		Qual(runtimeImport, "MsgReceiver").
		Block(jen.Return(innerFunc))
}

func (g *goGen) Client(prefix string, messages []MsgDesc) {
	// Client struct
	clientId := goId(true, prefix, "client")
	g.Type().Id(clientId).Struct(
		jen.Id("s").
			Qual(runtimeImport, "MsgSender"),
	)

	// New Client func
	newClientId := goId(true, "new", prefix, "client")
	g.Func().Id(newClientId).Params(
		jen.Id("s").
			Qual(runtimeImport, "MsgSender"),
	).Op("*").Id(clientId).Block(
		jen.Return(
			jen.Op("&").Id(clientId).Values(
				jen.Id("s").Op(":").Id("s"),
			),
		),
	)

	// Function for sending messages
	for _, msg := range messages {
		g.Func().Params(
			jen.Id("c").Op("*").Id(clientId),
		).Id(snakeToGoId(true, msg.Name)).Params(
			jen.Id("l").Uint32(),
			jen.Id("b").Qual("io", "Reader"),
		).Block(
			jen.Id("c").
				Dot("s").
				Call(
					jen.Id(goMsgId(prefix, msg)),
					jen.Id("l"),
					jen.Id("b"),
				),
		)
	}
}

func (g *goGen) Done() error {
	return g.Save(goOutputFile)
}

func snakeToGoId(export bool, snake string) string {
	return goId(export, strings.Split(snake, "_")...)
}

func goMsgId(p string, msg MsgDesc) string {
	parts := append([]string{p, "msg"}, strings.Split(msg.Name, "_")...)

	return goId(true, parts...)
}

func goId(export bool, parts ...string) string {
	var sb strings.Builder
	for i, part := range parts {
		part = strings.ToLower(part)

		if !export && i == 0 {
			sb.WriteString(part)
			continue
		}

		firstLetter, size := utf8.DecodeRuneInString(part)
		sb.WriteRune(unicode.ToUpper(firstLetter))
		sb.WriteString(part[size:])
	}

	return sb.String()
}
