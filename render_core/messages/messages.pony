// Code generated by submsg; DO NOT EDIT. 
use "msgpack" 
use "buffered" 
use "debug" 
use "collections" 
use "../../submsg/runtime/pony" 

primitive Engine
    fun core_ready(): MsgId => 0
    fun core_info(): MsgId => 1
    fun pixel_batch(): MsgId => 2

interface tag EngineServer
    fun tag core_ready(body: Array[U8] iso)
    fun tag core_info(body: Array[U8] iso)
    fun tag pixel_batch(body: Array[U8] iso)

primitive EngineRouter
    fun apply(s: EngineServer): ReceiveMsg =>
        {(id: MsgId, body: Array[U8] iso) =>
            match id
            | Engine.core_ready() => s.core_ready(consume body)
            | Engine.core_info() => s.core_info(consume body)
            | Engine.pixel_batch() => s.pixel_batch(consume body)
            end
        }

actor EngineClient
    let send_msg: SendMsg

    new create(send_msg': SendMsg) =>
        send_msg = send_msg'

    be core_ready(data: (Array[U8 val] iso | None)) =>
        send_msg(Engine.core_ready(), consume data)

    be core_info(data: (Array[U8 val] iso | None)) =>
        send_msg(Engine.core_info(), consume data)

    be pixel_batch(data: (Array[U8 val] iso | None)) =>
        send_msg(Engine.pixel_batch(), consume data)


primitive Core
    fun info(): MsgId => 0
    fun config(): MsgId => 1
    fun render_frame(): MsgId => 2

interface tag CoreServer
    fun tag info(body: Array[U8] iso)
    fun tag config(body: Array[U8] iso)
    fun tag render_frame(body: Array[U8] iso)

primitive CoreRouter
    fun apply(s: CoreServer): ReceiveMsg =>
        {(id: MsgId, body: Array[U8] iso) =>
            match id
            | Core.info() => s.info(consume body)
            | Core.config() => s.config(consume body)
            | Core.render_frame() => s.render_frame(consume body)
            end
        }

actor CoreClient
    let send_msg: SendMsg

    new create(send_msg': SendMsg) =>
        send_msg = send_msg'

    be info(data: (Array[U8 val] iso | None)) =>
        send_msg(Core.info(), consume data)

    be config(data: (Array[U8 val] iso | None)) =>
        send_msg(Core.config(), consume data)

    be render_frame(data: (Array[U8 val] iso | None)) =>
        send_msg(Core.render_frame(), consume data)


class val MsgCoreInfo is MsgPackMarshalable
    var version: String

    new val create(
        version': String
        ) =>
        version = version'

    new val zero() =>
        version = ""

    fun marshal_msgpack(w: Writer ref)? =>
        MessagePackEncoder.fixmap(w, 1)?
        MessagePackEncoder.fixstr(w, "Version")?
        MessagePackEncoder.str_8(w, version)?

primitive UnmarshalMsgPackMsgCoreInfo
    fun apply(r: Reader ref): MsgCoreInfo =>
        var version': String = ""

        try
            let map_size = Unmarshal.map(r)?
            for i in Range(0, map_size) do
                match MessagePackDecoder.fixstr(r)?
                | "Version" =>
                    version' = MessagePackDecoder.str(r)?
                else
                    Debug("unknown field" where stream = DebugErr)
                end
            end
        else
            Debug("Error unmarshalling" where stream = DebugErr)
        end

        MsgCoreInfo(
        version'
        )
class val Config is MsgPackMarshalable
    var aspect_ratio: F64
    var depth: U64
    var image_height: U64
    var image_width: U64
    var samples: U64

    new val create(
        aspect_ratio': F64,
        depth': U64,
        image_height': U64,
        image_width': U64,
        samples': U64
        ) =>
        aspect_ratio = aspect_ratio'
        depth = depth'
        image_height = image_height'
        image_width = image_width'
        samples = samples'

    new val zero() =>
        aspect_ratio = 0.0
        depth = 0
        image_height = 0
        image_width = 0
        samples = 0

    fun marshal_msgpack(w: Writer ref)? =>
        MessagePackEncoder.fixmap(w, 5)?
        MessagePackEncoder.fixstr(w, "AspectRatio")?
        MessagePackEncoder.float_64(w, aspect_ratio)
        MessagePackEncoder.fixstr(w, "Depth")?
        MessagePackEncoder.uint_64(w, depth)
        MessagePackEncoder.fixstr(w, "ImageHeight")?
        MessagePackEncoder.uint_64(w, image_height)
        MessagePackEncoder.fixstr(w, "ImageWidth")?
        MessagePackEncoder.uint_64(w, image_width)
        MessagePackEncoder.fixstr(w, "Samples")?
        MessagePackEncoder.uint_64(w, samples)

primitive UnmarshalMsgPackConfig
    fun apply(r: Reader ref): Config =>
        var aspect_ratio': F64 = 0.0
        var depth': U64 = 0
        var image_height': U64 = 0
        var image_width': U64 = 0
        var samples': U64 = 0

        try
            let map_size = Unmarshal.map(r)?
            for i in Range(0, map_size) do
                match MessagePackDecoder.fixstr(r)?
                | "AspectRatio" =>
                    aspect_ratio' = MessagePackDecoder.f64(r)?
                | "Depth" =>
                    depth' = MessagePackDecoder.u64(r)?
                | "ImageHeight" =>
                    image_height' = MessagePackDecoder.u64(r)?
                | "ImageWidth" =>
                    image_width' = MessagePackDecoder.u64(r)?
                | "Samples" =>
                    samples' = MessagePackDecoder.u64(r)?
                else
                    Debug("unknown field" where stream = DebugErr)
                end
            end
        else
            Debug("Error unmarshalling" where stream = DebugErr)
        end

        Config(
        aspect_ratio',
        depth',
        image_height',
        image_width',
        samples'
        )
class val Color is MsgPackMarshalable
    var b: U8
    var g: U8
    var r: U8

    new val create(
        b': U8,
        g': U8,
        r': U8
        ) =>
        b = b'
        g = g'
        r = r'

    new val zero() =>
        b = 0
        g = 0
        r = 0

    fun marshal_msgpack(w: Writer ref)? =>
        MessagePackEncoder.fixmap(w, 3)?
        MessagePackEncoder.fixstr(w, "B")?
        MessagePackEncoder.uint_8(w, b)
        MessagePackEncoder.fixstr(w, "G")?
        MessagePackEncoder.uint_8(w, g)
        MessagePackEncoder.fixstr(w, "R")?
        MessagePackEncoder.uint_8(w, r)

primitive UnmarshalMsgPackColor
    fun apply(r: Reader ref): Color =>
        var b': U8 = 0
        var g': U8 = 0
        var r': U8 = 0

        try
            let map_size = Unmarshal.map(r)?
            for i in Range(0, map_size) do
                match MessagePackDecoder.fixstr(r)?
                | "B" =>
                    b' = MessagePackDecoder.u8(r)?
                | "G" =>
                    g' = MessagePackDecoder.u8(r)?
                | "R" =>
                    r' = MessagePackDecoder.u8(r)?
                else
                    Debug("unknown field" where stream = DebugErr)
                end
            end
        else
            Debug("Error unmarshalling" where stream = DebugErr)
        end

        Color(
        b',
        g',
        r'
        )
class val Pixel is MsgPackMarshalable
    var color: Color
    var x: U64
    var y: U64

    new val create(
        color': Color,
        x': U64,
        y': U64
        ) =>
        color = color'
        x = x'
        y = y'

    new val zero() =>
        color = Color.zero()
        x = 0
        y = 0

    fun marshal_msgpack(w: Writer ref)? =>
        MessagePackEncoder.fixmap(w, 3)?
        MessagePackEncoder.fixstr(w, "Color")?
        color.marshal_msgpack(w)?
        MessagePackEncoder.fixstr(w, "X")?
        MessagePackEncoder.uint_64(w, x)
        MessagePackEncoder.fixstr(w, "Y")?
        MessagePackEncoder.uint_64(w, y)

primitive UnmarshalMsgPackPixel
    fun apply(r: Reader ref): Pixel =>
        var color': Color = Color.zero()
        var x': U64 = 0
        var y': U64 = 0

        try
            let map_size = Unmarshal.map(r)?
            for i in Range(0, map_size) do
                match MessagePackDecoder.fixstr(r)?
                | "Color" =>
                    color' = UnmarshalMsgPackColor(r)
                | "X" =>
                    x' = MessagePackDecoder.u64(r)?
                | "Y" =>
                    y' = MessagePackDecoder.u64(r)?
                else
                    Debug("unknown field" where stream = DebugErr)
                end
            end
        else
            Debug("Error unmarshalling" where stream = DebugErr)
        end

        Pixel(
        color',
        x',
        y'
        )