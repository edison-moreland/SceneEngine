// Code generated by submsg; DO NOT EDIT.
package messages

import "github.com/edison-moreland/SceneEngine/submsg/runtime/go"

const (
	EngineMsgCoreReady  submsg.MsgId = 0
	EngineMsgCoreInfo   submsg.MsgId = 1
	EngineMsgPixelBatch submsg.MsgId = 2
)

type EngineServer interface {
	CoreReady(body []byte) error
	CoreInfo(body []byte) error
	PixelBatch(body []byte) error
}

func EngineRouter(s EngineServer) submsg.MsgReceiver {
	return func(id submsg.MsgId, body []byte) error {
		switch id {
		case EngineMsgCoreReady:
			return s.CoreReady(body)
		case EngineMsgCoreInfo:
			return s.CoreInfo(body)
		case EngineMsgPixelBatch:
			return s.PixelBatch(body)
		default:
			return submsg.ErrMsgIdUnknown
		}
	}
}

type EngineClient struct {
	s submsg.MsgSender
}

func NewEngineClient(s submsg.MsgSender) *EngineClient {
	return &EngineClient{s: s}
}
func (c *EngineClient) CoreReady(b []byte) {
	c.s(EngineMsgCoreReady, b)
}
func (c *EngineClient) CoreInfo(b []byte) {
	c.s(EngineMsgCoreInfo, b)
}
func (c *EngineClient) PixelBatch(b []byte) {
	c.s(EngineMsgPixelBatch, b)
}

const (
	CoreMsgInfo        submsg.MsgId = 0
	CoreMsgConfig      submsg.MsgId = 1
	CoreMsgRenderFrame submsg.MsgId = 2
)

type CoreServer interface {
	Info(body []byte) error
	Config(body []byte) error
	RenderFrame(body []byte) error
}

func CoreRouter(s CoreServer) submsg.MsgReceiver {
	return func(id submsg.MsgId, body []byte) error {
		switch id {
		case CoreMsgInfo:
			return s.Info(body)
		case CoreMsgConfig:
			return s.Config(body)
		case CoreMsgRenderFrame:
			return s.RenderFrame(body)
		default:
			return submsg.ErrMsgIdUnknown
		}
	}
}

type CoreClient struct {
	s submsg.MsgSender
}

func NewCoreClient(s submsg.MsgSender) *CoreClient {
	return &CoreClient{s: s}
}
func (c *CoreClient) Info(b []byte) {
	c.s(CoreMsgInfo, b)
}
func (c *CoreClient) Config(b []byte) {
	c.s(CoreMsgConfig, b)
}
func (c *CoreClient) RenderFrame(b []byte) {
	c.s(CoreMsgRenderFrame, b)
}

type MsgCoreInfo struct {
	Version string
}
type Config struct {
	AspectRatio float64
	ImageHeight uint64
	ImageWidth  uint64
	Samples     uint64
	Depth       uint64
}
type Color struct {
	B float64
	R float64
	G float64
}
type Pixel struct {
	X     uint64
	Y     uint64
	Color Color
}
